# Setup lf options:
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

set icons

set shell sh
set shellopts '-c'
set ifs "\n"
set dircounts
set hidden
set incsearch
set ignorecase
set anchorfind false
set scrolloff 10
set wrapscroll

# Manage keybindings:
cmap <up> up
cmap <down> down
cmap <up> find-prev
cmap <down> find-next

map ;
map m

map bc bookmark_create
map bd bookmark_delete
map bl bookmark_jump

map <c-space> :toggle; up

map <delete> trash
map P push :delete<enter>y
map a push :makedir<space>

map op yank-path
map od yank-dirpath

map <enter> shell

map <c-n> newterm
map <a-n> newfold

map r
map rc push :rename<space>
map rb rename_base
map rd rename_base_keep 
map ra rename_keep_all 

# On startup:
${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

####################
# Commands section #
####################

cmd open ${{
    xdg-open $f > /dev/null 2> /dev/null &
}}

cmd trash ${{
    if [ -z "$fs" ]; then
        printf "$f\n" | while read line ; do
            trash-put "$line"
        done
    else
        printf "$fs\n" | while read line ; do
            trash-put "$line"
        done
    fi
}}

cmd newterm ${{
	setsid -f $TERMINAL 
}}

cmd makedir ${{
    mkdir -p "$1"
}}

cmd newfold ${{
    set -f
    read directory_name
    mkdir -- "$directory_name"
    mv -- $fx "$directory_name"
}}

cmd compress ${{
    set -f
    read archive
    apack "$archive".tar.gz $fs
}}

cmd yank-dirpath $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard

cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard

cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n "$fs" ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    code -n $new
    printf "Press key to confirm bulk rename...\n"
    read
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -r --backup=numbered -- "$@" .;;
        move) mv --backup=numbered -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}


cmd bookmark_jump ${{
    res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    lf -remote "send $id cd \"$res\""
}}

cmd bookmark_create ${{
    echo "$PWD" > $LF_BOOKMARK_PATH/"$(echo "$PWD" | sed -e "s/\//|/g")"
}}

cmd bookmark_delete ${{
    res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    rm $LF_BOOKMARK_PATH/"$(echo "$res" | sed -e "s/\//|/g")"
}}


cmd rename_base_keep ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won\'t deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename<a-b><c-b>"
}}

cmd rename_base ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	filename="${f##*.}"
	# quote it so we won\'t deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename"
}}

cmd rename_keep_all ${{
	# get 'basename' of the selection
	filename="${f##*/}"
	# quote it so we won\'t deal with quotes in the lf -remote command
	filename="$(printf '%q' "$filename")"
	filename="${filename// /<space>}"
	lf -remote "send $id push :rename<space>$filename"
}}
