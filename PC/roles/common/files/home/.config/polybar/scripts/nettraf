#!/bin/sh

# Function to get the active network interface
get_active_interface() {
    ip route | awk '/^default/ {print $5}'
}

# Function to update network statistics
update() {
    interface=$1
    sum_rx=0
    sum_tx=0

    # Read and update RX bytes
    rx_file="/sys/class/net/$interface/statistics/rx_bytes"
    [ -f "$rx_file" ] && sum_rx=$(($(cat "$rx_file") + sum_rx))

    # Read and update TX bytes
    tx_file="/sys/class/net/$interface/statistics/tx_bytes"
    [ -f "$tx_file" ] && sum_tx=$(($(cat "$tx_file") + sum_tx))
}

# Function to get the network icon in waffle font
get_network_icon() {
    case $1 in
    wlp*)
        echo "$(get_wifi_ramp_icon $1)"
        ;;
    en* | br*)
        echo "%{F#00FF00}%{T5}%{T-}%{F-}" # Ethernet icon
        ;;
    *)
        echo "%{F#FF0000}%{T5}%{T-}%{F-}" # Unknown or no network icon
        ;;
    esac
}

# Function to get the WiFi signal strength in waffle font with color ramp
get_wifi_ramp_icon() {
    interface=$1
    signal_strength=$(iw dev $interface link | awk '/signal/ {print int($2)}')

    if [ "$signal_strength" -eq "$signal_strength" ] 2>/dev/null; then
        if [ "$signal_strength" -ge -50 ]; then
            echo "%{F#00FF00}%{T5}%{T-}%{F-}" # Strong signal in green
        elif [ "$signal_strength" -ge -60 ]; then
            echo "%{F#FFFF00}%{T5}%{T-}%{F-}" # Moderate signal in yellow
        elif [ "$signal_strength" -ge -70 ]; then
            echo "%{F#FFA500}%{T5}%{T-}%{F-}" # Weak signal in orange
        else
            echo "%{F#FF0000}%{T5}%{T-}%{F-}" # Very weak signal in red
        fi
    else
        echo "%{F#FF0000}%{T5}%{T-}%{F-}" # Disconnected or no signal icon in red
    fi
}

# Get the initial active interface
active_interface=$(get_active_interface)

# Initial update
update $active_interface

old_rx=$sum_rx
old_tx=$sum_tx

# Loop to continuously update and print network statistics
while true; do
    new_active_interface=$(get_active_interface)

    # Check if the active interface has changed
    if [ "$active_interface" != "$new_active_interface" ]; then
        active_interface=$new_active_interface
        old_rx=0
        old_tx=0
    fi

    # Update network statistics
    update $active_interface

    # Get the network icon
    network_icon=$(get_network_icon $active_interface)

    printf '%4sB %4sB %s\n' "$(numfmt --to=si $((sum_rx - old_rx)))" "$(numfmt --to=si $((sum_tx - old_tx)))" "$network_icon"

    old_rx=$sum_rx
    old_tx=$sum_tx

    sleep 1
done
