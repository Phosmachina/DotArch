#!/bin/bash

# List of dependencies
dependencies=("arecord" "deepctl" "jq" "xclip" "xdotool" "notify-send")

# Global variable for inference model name
inference_model="openai/whisper-large-v3-turbo"

check_dependencies() {
    for dependency in "${dependencies[@]}"; do
        if ! command -v "$dependency" &>/dev/null; then
            echo "Error: '$dependency' command not found. Please install the corresponding package." >&2
            exit 1
        fi
    done
}

# Start recording: use arecord tool to start an audio record.
start_recording() {
    notify_pid=$(notify-send -p -t 0 -u normal "Whisper Transcript" "Recording started...")
    tempfile=$(mktemp /tmp/recording_XXXXXX.wav)
    arecord -f cd "$tempfile" >/dev/null &
    record_pid=$!
    echo "$record_pid $notify_pid $tempfile" >"/tmp/recording_info"
}

# Function to stop recording, process audio, and display transcript
stop_recording() {
    local record_pid notify_pid tempfile
    read record_pid notify_pid tempfile <"/tmp/recording_info"

    kill -INT "$record_pid"
    notify-send -t 0 -r "$notify_pid" "Whisper Transcript" "Recording stopped, transcript..."

    # Prepare audio file for transcription
    local processed_audio=$(prepare_audio "$tempfile")
    transcribe_audio "$processed_audio" | format_txt | xclip -selection clipboard

    xdotool key --clearmodifiers ctrl+shift+v
    notify-send -r "$notify_pid" "Whisper Transcript" "Transcript complete"

    # Clean up temporary files
    rm "/tmp/recording_info" "$tempfile" "${processed_audio}"
}

# Function to prepare an audio file: removes silence and accelerates the audio
prepare_audio() {
    local tempfile="$1"
    local trimmed_audio=$(mktemp /tmp/trimmed_XXXXXX.wav)
    local scaled_audio=$(mktemp /tmp/scaled_XXXXXX.wav)

    # Remove silence and speed up audio
    sox "$tempfile" "$trimmed_audio" silence 1 0.1 0.1% -1 0.1 0.1% -t high 2>/dev/null
    sox "$trimmed_audio" "$scaled_audio" tempo 1.2 2>/dev/null

    convert_to_aac "$scaled_audio"
}

# Function to process an audio or video file for transcription
process_file() {
    local path="${1%.*}"
    local audio_file=$(convert_to_aac "$1")
    local json_result=$(transcribe_audio "$audio_file")

    echo "$json_result" | format_txt >"${path}.txt"
    [ "$2" = "--srt" ] && echo "$json_result" | format_srt >"${path}.srt"

    rm "$audio_file"
}

# Function to convert an audio file to AAC format
convert_to_aac() {
    local tmp_audio=$(mktemp /tmp/"$(basename "$1" .wav)"_XXXXXX.aac)

    ffmpeg -y -i "$1" -vn -c:a aac -ar 44100 -ac 2 "$tmp_audio" >/dev/null 2>&1 || {
        echo "Error: Unable to convert file to AAC format." >&2
        exit 1
    }

    echo "$tmp_audio"
}

# Function to transcribe audio using DeepInfra API
transcribe_audio() {
    deepctl infer -m "$inference_model" -i "audio=@$1"
}

# Format transcribed text for plain text output
format_txt() {
    jq -r '.text | gsub("^ +";"")'
}

# Format transcribed text into SRT subtitle format
format_srt() {
    jq -r '
.segments[] |
   .start as $start |
    ($start | tostring | split(".")) as $split |
    (
        ($split[0] | tonumber | strftime("%H:%M:%S")) +
        "." +
        ($split[1] |.[0:3])
    ) as $start_formatted |
   .end as $end |
    ($end | tostring | split(".")) as $split |
    (
        ($split[0] | tonumber | strftime("%H:%M:%S")) +
        "." +
        ($split[1] |.[0:3])
    ) as $end_formatted |
   "\(.id)\n\($start_formatted) --> \($end_formatted)\n\(.text | gsub("^ +";"") | gsub(" +$";""))\n"
  '
}

# Main script logic: starts/stops recording or processes a file
main() {
    check_dependencies

    if [ "$#" -eq 1 ]; then
        process_file "$1"
    elif [ "$#" -eq 2 ] && [ "$2" = "--srt" ]; then
        process_file "$1" --srt
    else
        if [ -f "/tmp/recording_info" ]; then
            read record_pid notify_pid tempfile <"/tmp/recording_info"
            if ps -p "$record_pid" >/dev/null; then
                stop_recording
            else
                start_recording
            fi
        else
            start_recording
        fi
    fi
}

main "$@"
