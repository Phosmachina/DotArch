#!/bin/sh

# List of dependencies
dependencies=("arecord" "deepctl" "jq" "xclip" "xdotool" "notify-send")

check_dependencies() {
    for dependency in "${dependencies[@]}"; do
        if ! command -v "$dependency" &> /dev/null; then
            echo "Error: '$dependency' command not found. Please install the corresponding package." >&2
            exit 1
        fi
    done
}

# Start recording: use arecord tool to start an audio record.
start_recording() {
    notify_pid=$(notify-send -p -t 0 -u normal "Whisper Transcript" "Recording started...")
    tempfile=$(mktemp /tmp/recording_XXXXXX.wav)
    arecord -f cd "$tempfile" > /dev/null &
    record_pid=$!
    echo "$record_pid $notify_pid $tempfile" > "/tmp/recording_info"
}

# Stop recording: call deepinfra API, add transcription to clipboard and paste.
stop_recording() {
    read record_pid notify_pid tempfile < "/tmp/recording_info"
    kill -INT $record_pid
    
    notify-send -t 0 -r "$notify_pid" "Whisper Transcript" "Recording stopped, transcript..."
    
    transcribe_audio "$tempfile" | xclip -selection clipboard
    
    xdotool key --clearmodifiers ctrl+v
    notify-send -r "$notify_pid" "Whisper Transcript" "Transcript done"
    
    # Cleaning
    rm "/tmp/recording_info"
}

# Perform transcription using deepctl and extract only text with jq.
transcribe_audio() {
    f1="${1%.*}_trimed.wav"
    f2="${1%.*}_scaled.wav"
    
    # Remove silence from the audio file:
    sox "$1" "$f1" silence 1 0.1 0.1% -1 0.1 0.1% -t high 2>/dev/null
    
    # Accelerate the audio:
    sox "$f1" "$f2" tempo 1.3 2>/dev/null

    # Infer audio with openai whisper model:
    deepctl infer -m "openai/whisper-large-v3" -i "audio=@$f2" | jq -r ".text"
}

# Extract audio from video if provided and perform transcription.
process_file() {
    file="$1"
    case "$file" in
        *.webm|*.mp4|*.mkv|*.avi)
            audio_file="${file%.*}.wav"
            ffmpeg -i "$file" -vn -acodec pcm_s16le -ar 44100 -ac 2 "$audio_file" >/dev/null 2>&1
        ;;
        *.wav|*.mp3)
            audio_file="$file"
        ;;
        *)
            echo "Error: Unsupported file format. Only .webm, .mp4, .mkv, .avi, .wav, and .mp3 are supported." >&2
            exit 1
        ;;
    esac
    transcribe_audio "$audio_file" > "${file%.*}.txt"
}


# Main part
check_dependencies

if [ "$#" -eq 1 ]; then
    process_file "$1"
else
    if [ -f "/tmp/recording_info" ]; then
        read record_pid notify_pid tempfile < "/tmp/recording_info"
        if ps -p "$record_pid" > /dev/null; then
            stop_recording
        else
            start_recording
        fi
    else
        start_recording
    fi
fi

# TODO:
# - Créer un historique des enregistrements faits par ce script associé avec un fichier texte des transcriptions réalisées.
